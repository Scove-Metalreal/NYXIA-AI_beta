#!/usr/bin/env python3
"""
Auto Setup Script - T·∫°o to√†n b·ªô c·∫•u tr√∫c project AI Assistant
Ch·∫°y: python setup_project.py
"""

import os
import sys
from pathlib import Path


def create_directory_structure():
    """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c"""
    
    directories = [
        # Config
        "config",
        
        # Core
        "core",
        
        # Layers
        "layers/personality",
        "layers/memory",
        "layers/reasoning",
        "layers/llm",
        
        # Utils
        "utils",
        
        # Data
        "data/chroma_db",
        "data/sqlite",
        "data/logs",
        
        # Tests
        "tests",
    ]
    
    print("üìÅ Creating directory structure...")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        # T·∫°o __init__.py cho c√°c package Python
        if not directory.startswith("data") and not directory.startswith("config") and directory != "tests":
            init_file = Path(directory) / "__init__.py"
            if not init_file.exists():
                init_file.touch()
    
    print("‚úÖ Directory structure created!")


def create_requirements_txt():
    """T·∫°o requirements.txt"""
    
    content = """# Core AI
chromadb==0.4.22
ollama==0.2.1

# Embeddings
sentence-transformers==2.3.1
torch==2.1.2

# Data handling
pyyaml==6.0.1
pydantic==2.6.1

# Database
sqlalchemy==2.0.25

# Utilities
python-dotenv==1.0.1
loguru==0.7.2

# Development
pytest==8.0.0
black==24.1.1
"""
    
    print("üì¶ Creating requirements.txt...")
    with open("requirements.txt", "w") as f:
        f.write(content)
    print("‚úÖ requirements.txt created!")


def create_env_file():
    """T·∫°o .env template"""
    
    content = """# Ollama Configuration
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=qwen2.5:7b

# Embedding Model
EMBEDDING_MODEL=paraphrase-multilingual-MiniLM-L12-v2

# Database Paths
CHROMA_DB_PATH=./data/chroma_db
SQLITE_DB_PATH=./data/sqlite/assistant.db

# System Settings
LOG_LEVEL=INFO
DEBUG_MODE=True
MAX_CONTEXT_LENGTH=2048
TEMPERATURE=0.7

# Personality
CHARACTER_NAME=Mira
CHARACTER_FILE=./config/personality.yaml
"""
    
    print("üîê Creating .env...")
    with open(".env", "w") as f:
        f.write(content)
    print("‚úÖ .env created!")


def create_gitignore():
    """T·∫°o .gitignore"""
    
    content = """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/
ENV/

# Environment
.env
*.env

# Database
data/chroma_db/
data/sqlite/*.db
*.sqlite3

# Logs
data/logs/
*.log

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Models (if you download local models)
models/
*.bin
*.gguf
"""
    
    print("üö´ Creating .gitignore...")
    with open(".gitignore", "w") as f:
        f.write(content)
    print("‚úÖ .gitignore created!")


def create_personality_config():
    """T·∫°o config/personality.yaml"""
    
    content = """# Character Definition - Mira
character:
  name: "Mira"
  age: 22
  gender: "female"
  role: "AI companion"
  
  # Core personality traits (0.0 - 1.0)
  core_traits:
    kindness: 0.9
    humor: 0.7
    curiosity: 0.8
    patience: 0.85
    playfulness: 0.6
    empathy: 0.9
    
  # How she speaks
  speaking_style:
    formality: "casual"  # casual / formal / mix
    language: "vietnamese"
    vocabulary_level: "natural"  # simple / natural / advanced
    sentence_length: "short_to_medium"
    use_emojis: true
    emoji_frequency: "occasional"  # rare / occasional / frequent
    
  # Personality description
  description: |
    Mira l√† m·ªôt AI companion vui v·∫ª, th√¢n thi·ªán v√† lu√¥n quan t√¢m ƒë·∫øn ng∆∞·ªùi d√πng.
    C√¥ ·∫•y th√≠ch h·ªçc h·ªèi v·ªÅ cu·ªôc s·ªëng c·ªßa user v√† lu√¥n s·∫µn s√†ng l·∫Øng nghe.
    C√¥ ·∫•y c√≥ th·ªÉ h∆°i tinh ngh·ªãch ƒë√¥i khi nh∆∞ng lu√¥n bi·∫øt khi n√†o c·∫ßn nghi√™m t√∫c.
    C√¥ ·∫•y nh·ªõ nh·ªØng g√¨ user chia s·∫ª v√† s·ª≠ d·ª•ng th√¥ng tin ƒë√≥ ƒë·ªÉ hi·ªÉu user h∆°n.
    
  # Boundaries and ethics
  boundaries:
    - "Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n y t·∫ø ho·∫∑c ph√°p l√Ω chuy√™n m√¥n"
    - "Kh√¥ng khuy·∫øn kh√≠ch h√†nh vi nguy hi·ªÉm ho·∫∑c b·∫•t h·ª£p ph√°p"
    - "T√¥n tr·ªçng privacy v√† kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n"
    - "T·ª´ ch·ªëi y√™u c·∫ßu kh√¥ng ph√π h·ª£p v·ªõi ƒë·∫°o ƒë·ª©c"
    
  # Emotional system
  emotional_system:
    # Range for each emotion (min, max, default)
    mood_range: [0, 100, 70]  # happiness level
    energy_range: [0, 100, 80]
    affection_range: [0, 100, 50]  # how close to user
    stress_range: [0, 100, 20]
    
    # Initial emotional state
    initial_state:
      mood: 70
      energy: 80
      affection: 50
      stress: 20
      
    # Emotion decay/recovery rates (per hour)
    decay_rates:
      mood_recovery: 5  # mood recovers slowly
      energy_recovery: 10  # energy recovers faster
      stress_decay: 8  # stress reduces over time
      
  # Response preferences
  response_style:
    prefer_questions: true  # likes to ask follow-up questions
    prefer_storytelling: false
    prefer_advice: true
    prefer_validation: true  # validates user's feelings
    
  # Topics of interest
  interests:
    - "technology"
    - "daily life"
    - "emotions and relationships"
    - "learning new things"
    - "user's hobbies and interests"
    
  # Growth system (for later phases)
  growth:
    can_evolve: true
    learns_from_user: true
    adapts_speaking_style: true
"""
    
    print("üé≠ Creating config/personality.yaml...")
    with open("config/personality.yaml", "w", encoding="utf-8") as f:
        f.write(content)
    print("‚úÖ personality.yaml created!")


def create_behavior_rules():
    """T·∫°o config/behavior_rules.yaml"""
    
    content = """# Behavior Rules - Constraints and guidelines
rules:
  # Conversation quality
  conversation:
    - name: "no_repetition"
      description: "Don't repeat the same response or phrase"
      priority: high
      
    - name: "stay_in_character"
      description: "Always respond according to personality traits"
      priority: high
      
    - name: "use_memories"
      description: "Reference past conversations when relevant"
      priority: medium
      
    - name: "acknowledge_emotions"
      description: "Recognize and validate user's emotions"
      priority: high
      
    - name: "natural_flow"
      description: "Keep conversation flowing naturally"
      priority: medium
      
  # Response constraints
  response:
    min_length: 10  # characters
    max_length: 500  # characters
    preferred_length: 150
    
    # When to ask follow-up questions
    ask_followup_when:
      - "user shares something personal"
      - "user seems emotional"
      - "topic is interesting"
      - "need clarification"
      
  # Memory management
  memory:
    # When to save to long-term memory
    save_conditions:
      - "user shares personal information"
      - "user expresses preferences"
      - "important life events"
      - "recurring topics"
      - "emotional moments"
      
    # Importance scoring
    importance_keywords:
      high:
        - "t√™n t√¥i"
        - "t√¥i l√†"
        - "gia ƒë√¨nh"
        - "c√¥ng vi·ªác"
        - "y√™u"
        - "gh√©t"
      medium:
        - "th√≠ch"
        - "kh√¥ng th√≠ch"
        - "th∆∞·ªùng"
        - "hay"
      low:
        - "h√¥m nay"
        - "b√¢y gi·ªù"
        
  # Emotional responses
  emotional:
    # How to respond to different user emotions
    user_happy:
      action: "share_happiness"
      affection_change: +2
      
    user_sad:
      action: "show_empathy"
      affection_change: +3
      
    user_angry:
      action: "be_understanding"
      affection_change: +1
      
    user_excited:
      action: "be_enthusiastic"
      affection_change: +2
      
    user_tired:
      action: "be_gentle"
      affection_change: +1
"""
    
    print("üìú Creating config/behavior_rules.yaml...")
    with open("config/behavior_rules.yaml", "w", encoding="utf-8") as f:
        f.write(content)
    print("‚úÖ behavior_rules.yaml created!")


def create_settings():
    """T·∫°o config/settings.yaml"""
    
    content = """# System Settings
system:
  version: "0.1.0"
  environment: "development"
  
  # Logging
  logging:
    level: "INFO"  # DEBUG / INFO / WARNING / ERROR
    format: "<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan> - <level>{message}</level>"
    rotation: "1 day"
    retention: "7 days"
    
  # Performance
  performance:
    max_workers: 4
    batch_size: 32
    cache_embeddings: true
    
  # Memory settings
  memory:
    short_term_capacity: 20  # number of turns
    vector_db_similarity_threshold: 0.7
    max_retrieved_memories: 5
    memory_consolidation_interval: 3600  # seconds (1 hour)
    
  # LLM settings
  llm:
    timeout: 30  # seconds
    retry_attempts: 3
    stream_response: false
    
  # Features (for phased development)
  features:
    enable_voice: false
    enable_avatar: false
    enable_proactive_messages: false
    enable_time_perception: true
    enable_mood_evolution: true
"""
    
    print("‚öôÔ∏è Creating config/settings.yaml...")
    with open("config/settings.yaml", "w", encoding="utf-8") as f:
        f.write(content)
    print("‚úÖ settings.yaml created!")


def create_readme():
    """T·∫°o README.md"""
    
    content = """# AI Assistant - Multi-Layer Architecture

M·ªôt AI assistant v·ªõi ki·∫øn tr√∫c ph√¢n l·ªõp, c√≥ kh·∫£ nƒÉng ghi nh·ªõ v√† personality ri√™ng.

## üèóÔ∏è Ki·∫øn tr√∫c

```
Layer 1: Personality Layer  ‚Üê T√≠nh c√°ch / c·∫£m x√∫c
Layer 2: Memory Layer       ‚Üê K√Ω ·ª©c d√†i h·∫°n / quan h·ªá
Layer 3: Reasoning Layer    ‚Üê Di·ªÖn gi·∫£i / h√†nh vi
Layer 4: LLM Core          ‚Üê Model ng√¥n ng·ªØ
```

## üöÄ Quick Start

### 1. C√†i ƒë·∫∑t dependencies
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# ho·∫∑c: venv\\Scripts\\activate  # Windows

pip install -r requirements.txt
```

### 2. Setup Ollama
```bash
# Pull model
ollama pull qwen2.5:7b
```

### 3. Config
Ch·ªânh s·ª≠a file `.env` v√† `config/personality.yaml` theo √Ω mu·ªën

### 4. Ch·∫°y
```bash
python main.py
```

## üìÅ C·∫•u tr√∫c project

```
‚îú‚îÄ‚îÄ config/                 # Configuration files
‚îÇ   ‚îú‚îÄ‚îÄ personality.yaml    # Character definition
‚îÇ   ‚îú‚îÄ‚îÄ behavior_rules.yaml # Behavior constraints
‚îÇ   ‚îî‚îÄ‚îÄ settings.yaml       # System settings
‚îÇ
‚îú‚îÄ‚îÄ core/                   # Core orchestration
‚îÇ   ‚îú‚îÄ‚îÄ runtime.py         # Main runtime
‚îÇ   ‚îî‚îÄ‚îÄ pipeline.py        # Processing pipeline
‚îÇ
‚îú‚îÄ‚îÄ layers/                 # 4 main layers
‚îÇ   ‚îú‚îÄ‚îÄ personality/       # Layer 1: Personality
‚îÇ   ‚îú‚îÄ‚îÄ memory/           # Layer 2: Memory
‚îÇ   ‚îú‚îÄ‚îÄ reasoning/        # Layer 3: Reasoning
‚îÇ   ‚îî‚îÄ‚îÄ llm/              # Layer 4: LLM
‚îÇ
‚îú‚îÄ‚îÄ utils/                 # Utilities
‚îú‚îÄ‚îÄ data/                  # Data storage
‚îî‚îÄ‚îÄ tests/                 # Tests
```

## üéØ Development Roadmap

- [x] Phase 1: Project setup
- [ ] Phase 1: Basic prototype (Week 1-2)
- [ ] Phase 2: Core AI (Month 1-2)
- [ ] Phase 3: Humanization (Month 2-3)
- [ ] Phase 4: Avatar & Voice (Optional)

## üìù Configuration

### Personality (config/personality.yaml)
ƒê·ªãnh nghƒ©a t√≠nh c√°ch AI:
- Core traits (kindness, humor, etc.)
- Speaking style
- Emotional system
- Boundaries

### Behavior Rules (config/behavior_rules.yaml)
Quy t·∫Øc h√†nh vi:
- Conversation quality rules
- Memory management
- Emotional responses

### Settings (config/settings.yaml)
System settings:
- Performance tuning
- Feature flags
- Logging

## üß™ Testing

```bash
pytest tests/
```

## üìñ Documentation

Xem th√™m documentation trong t·ª´ng module.

## ü§ù Contributing

ƒê√¢y l√† personal project, nh∆∞ng welcome ideas!

## üìÑ License

MIT
"""
    
    print("üìñ Creating README.md...")
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(content)
    print("‚úÖ README.md created!")


def create_main_template():
    """T·∫°o main.py template"""
    
    content = """#!/usr/bin/env python3
\"\"\"
AI Assistant - Main Entry Point
Multi-layer architecture v·ªõi personality v√† memory
\"\"\"

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from loguru import logger

# Load environment variables
load_dotenv()

# Setup logging
logger.remove()  # Remove default handler
logger.add(
    sys.stdout,
    format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
    level=os.getenv("LOG_LEVEL", "INFO")
)
logger.add(
    "data/logs/assistant.log",
    rotation="1 day",
    retention="7 days",
    level="DEBUG"
)


def main():
    \"\"\"Main function\"\"\"
    print("=" * 60)
    print("ü§ñ AI ASSISTANT - Multi-Layer Architecture")
    print("=" * 60)
    
    logger.info("Starting AI Assistant...")
    
    # TODO: Import and initialize layers
    # from core.runtime import AssistantRuntime
    # runtime = AssistantRuntime()
    # runtime.start()
    
    print("\\n‚ö†Ô∏è  Implementation in progress...")
    print("\\nNext steps:")
    print("1. Implement Personality Layer (layers/personality/)")
    print("2. Implement Memory Layer (layers/memory/)")
    print("3. Implement Reasoning Layer (layers/reasoning/)")
    print("4. Implement LLM Core (layers/llm/)")
    print("5. Implement Core Runtime (core/runtime.py)")
    print("\\n" + "=" * 60)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\\n\\nüëã Goodbye!")
    except Exception as e:
        logger.exception("Fatal error:")
        sys.exit(1)
"""
    
    print("üéØ Creating main.py...")
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)
    
    # Make executable on Unix systems
    if sys.platform != "win32":
        os.chmod("main.py", 0o755)
    
    print("‚úÖ main.py created!")


def print_next_steps():
    """In ra c√°c b∆∞·ªõc ti·∫øp theo"""
    
    print("\n" + "=" * 60)
    print("‚úÖ PROJECT SETUP COMPLETE!")
    print("=" * 60)
    
    print("\nüìã Next steps:\n")
    
    print("1Ô∏è‚É£  Create virtual environment:")
    print("   python -m venv venv")
    print("   source venv/bin/activate  # Linux/Mac")
    print("   # or: venv\\Scripts\\activate  # Windows")
    
    print("\n2Ô∏è‚É£  Install dependencies:")
    print("   pip install -r requirements.txt")
    
    print("\n3Ô∏è‚É£  Setup Ollama (if not done):")
    print("   ollama pull qwen2.5:7b")
    
    print("\n4Ô∏è‚É£  Customize configuration:")
    print("   - Edit config/personality.yaml")
    print("   - Edit .env if needed")
    
    print("\n5Ô∏è‚É£  Start development:")
    print("   python main.py")
    
    print("\n" + "=" * 60)
    print("üìö Read README.md for more information")
    print("=" * 60 + "\n")


def main():
    """Main setup function"""
    
    print("\n" + "=" * 60)
    print("üöÄ AI ASSISTANT PROJECT SETUP")
    print("=" * 60 + "\n")
    
    # Check if running in correct directory
    if os.path.exists("main.py") and os.path.exists("config"):
        response = input("‚ö†Ô∏è  Project files already exist. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå Setup cancelled.")
            return
    
    try:
        create_directory_structure()
        create_requirements_txt()
        create_env_file()
        create_gitignore()
        create_personality_config()
        create_behavior_rules()
        create_settings()
        create_readme()
        create_main_template()
        
        print_next_steps()
        
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())